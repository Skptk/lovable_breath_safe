# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Security & Performance Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'

jobs:
  security-and-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check GitGuardian token availability
      id: check-token
      run: |
        if [ -n "${{ secrets.GG_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Network diagnostics
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        echo "🔍 Checking network connectivity..."
        echo "Testing DNS resolution:"
        nslookup github.com || echo "❌ DNS resolution failed for github.com"
        nslookup api.github.com || echo "❌ DNS resolution failed for api.github.com"
        
        echo "Testing HTTP connectivity:"
        curl -I https://github.com || echo "❌ HTTPS connection failed to github.com"
        curl -I https://api.github.com || echo "❌ HTTPS connection failed to api.github.com"
        
        echo "Testing ping (if available):"
        ping -c 3 github.com || echo "⚠️  Ping not available or failed"

    - name: Install GitGuardian CLI
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        echo "📥 Installing GitGuardian CLI..."
        
        # Install Python and pip first (required for GitGuardian)
        echo "🐍 Installing Python dependencies..."
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv
        
        # Create a virtual environment for GitGuardian
        python3 -m venv ggshield_env
        source ggshield_env/bin/activate
        
        # Install GitGuardian using pip (official method)
        echo "📦 Installing GitGuardian CLI via pip..."
        pip install --upgrade pip
        pip install ggshield
        
        # Verify installation
        if command -v ggshield >/dev/null 2>&1; then
          echo "✅ GitGuardian CLI installed successfully"
          ggshield --version
        else
          echo "❌ Failed to install GitGuardian CLI via pip"
          
          # Fallback: Try alternative installation methods
          echo "🔄 Trying alternative installation methods..."
          
          # Method 1: Install via pip3
          pip3 install ggshield || echo "❌ pip3 installation failed"
          
          # Method 2: Install via python3 -m pip
          python3 -m pip install ggshield || echo "❌ python3 -m pip installation failed"
          
          # Method 3: Try to find ggshield in PATH
          if command -v ggshield >/dev/null 2>&1; then
            echo "✅ GitGuardian CLI found in PATH"
            ggshield --version
          else
            echo "❌ All installation methods failed"
            echo "Available Python versions:"
            python3 --version || echo "Python3 not available"
            pip3 --version || echo "pip3 not available"
            echo "PATH: $PATH"
            exit 1
          fi
        fi
        
        # Deactivate virtual environment
        deactivate

    - name: Run security scan
      if: steps.check-token.outputs.token_available == 'true'
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GG_TOKEN }}
      run: |
        # Activate the virtual environment for the scan
        source ggshield_env/bin/activate
        ggshield scan path . --exit-zero --verbose

    - name: Skip security scan (no token)
      if: steps.check-token.outputs.token_available == 'false'
      run: |
        echo "⚠️  GitGuardian token not available, skipping security scan"
        echo "This is normal for forks and PRs from external contributors"

    - name: Build project
      run: npm run build

    - name: Start preview server and wait
      run: |
        npm run preview:ci &
        SERVER_PID=$!
        
        # Wait for server to be ready
        echo "Waiting for preview server to start..."
        timeout 60 bash -c 'until curl -s http://localhost:4174 > /dev/null; do sleep 2; done'
        
        if [ $? -eq 0 ]; then
          echo "Preview server is ready!"
          echo "Server PID: $SERVER_PID"
        else
          echo "Preview server failed to start within 60 seconds"
          exit 1
        fi

    - name: Verify server is running
      run: |
        # Check if server is responding
        curl -f http://localhost:4174 || exit 1
        echo "Server is responding correctly"

    - name: Run Lighthouse CI
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun --upload.target=temporary-public-storage

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: .lighthouseci/
        retention-days: 30
