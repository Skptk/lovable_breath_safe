# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Security & Performance Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'

jobs:
  security-and-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check GitGuardian token availability
      id: check-token
      run: |
        if [ -n "${{ secrets.GG_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Run GitGuardian security scan
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        echo "üîç Running GitGuardian security scan..."
        
        # Install GitGuardian CLI
        echo "üì• Installing GitGuardian CLI..."
        python3 -m pip install --user --upgrade pip
        python3 -m pip install --user virtualenv
        python3 -m virtualenv ggshield_env
        source ggshield_env/bin/activate
        
        # Install GitGuardian CLI
        pip install ggshield
        
        # Show available commands for debugging
        echo "üîç Available GitGuardian CLI commands:"
        ggshield --help
        
        # Configure GitGuardian with API key
        echo "üîë Configuring GitGuardian with API key..."
        export GITGUARDIAN_API_KEY="${{ secrets.GG_TOKEN }}"
        
        # Migrate deprecated config if it exists
        if [ -f ".gitguardian.yaml" ]; then
          echo "üîÑ Migrating deprecated .gitguardian.yaml configuration..."
          ggshield config migrate || echo "‚ö†Ô∏è Config migration failed, continuing..."
        fi
        
        # Try multiple command variations
        echo "üîç Running GitGuardian security scan..."
        
        # Method 1: Try secret scan command
        if ggshield secret scan path . --exit-zero --verbose; then
          echo "‚úÖ GitGuardian scan completed successfully with secret scan"
          exit 0
        fi
        
        # Method 2: Try scan path command
        if ggshield scan path . --exit-zero --verbose; then
          echo "‚úÖ GitGuardian scan completed successfully with scan path"
          exit 0
        fi
        
        # Method 3: Try scan-repo command
        if ggshield scan-repo . --exit-zero --verbose; then
          echo "‚úÖ GitGuardian scan completed successfully with scan-repo"
          exit 0
        fi
        
        # Method 4: Try scan-dir command
        if ggshield scan-dir . --exit-zero --verbose; then
          echo "‚úÖ GitGuardian scan completed successfully with scan-dir"
          exit 0
        fi
        
        # If all methods fail, show available commands
        echo "‚ùå All scan methods failed. Available commands:"
        ggshield --help
        exit 1

    - name: Skip GitGuardian scan
      if: steps.check-token.outputs.token_available == 'false'
      run: |
        echo "‚ö†Ô∏è GitGuardian token not available, skipping security scan"
        echo "‚ÑπÔ∏è To enable security scanning, add GG_TOKEN secret to repository"

    - name: Build project
      run: npm run build

    - name: Start preview server and wait
      run: |
        echo "üöÄ Starting preview server..."
        npm run preview:ci &
        SERVER_PID=$!
        
        # Wait for server to be ready
        echo "‚è≥ Waiting for preview server to start..."
        timeout 60 bash -c 'until curl -s http://localhost:4174 > /dev/null; do sleep 2; done'
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Preview server is ready!"
          echo "Server PID: $SERVER_PID"
        else
          echo "‚ùå Server failed to start on any port"
          exit 1
        fi

    - name: Verify server is running
      run: |
        # Check if server is responding
        curl -f http://localhost:4174 || exit 1
        echo "‚úÖ Server is responding correctly on port 4174"
        
        # Wait for React app to fully load
        echo "‚è≥ Waiting for React app to fully load..."
        sleep 30

    - name: Run Lighthouse CI performance audit
      run: |
        echo "üîç Running Lighthouse CI performance audit on port 4174..."
        
        # Create reports directory
        mkdir -p reports/lighthouse
        
        # Run Lighthouse CI with the correct port
        npx @lhci/cli@latest collect \
          --config=.lighthouserc.cjs \
          --url=http://localhost:4174 \
          --outputDir=reports/lighthouse \
          --numberOfRuns=3
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Lighthouse CI collection completed successfully"
        else
          echo "‚ùå Lighthouse CI collection failed"
          exit 1
        fi

    - name: Assert Lighthouse CI thresholds
      run: |
        echo "üîç Asserting Lighthouse CI thresholds..."
        
        npx @lhci/cli@latest assert \
          --config=.lighthouserc.cjs \
          --outputDir=reports/lighthouse
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Lighthouse CI thresholds met"
        else
          echo "‚ùå Lighthouse CI thresholds not met"
          exit 1
        fi

    - name: Upload Lighthouse CI results
      if: always()
      run: |
        echo "üì§ Uploading Lighthouse CI results..."
        
        npx @lhci/cli@latest upload \
          --config=.lighthouserc.cjs \
          --outputDir=reports/lighthouse
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Lighthouse CI results uploaded successfully"
        else
          echo "‚ö†Ô∏è Lighthouse CI upload failed (non-critical)"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: reports/lighthouse/
        retention-days: 30

    - name: Deploy to Netlify
      if: success() && github.ref == 'refs/heads/master'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: master
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
