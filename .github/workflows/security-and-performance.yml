# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Security & Performance Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'

jobs:
  security-and-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check GitGuardian token availability
      id: check-token
      run: |
        if [ -n "${{ secrets.GG_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Install GitGuardian CLI
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        # Install Python3 and pip
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv
        
        # Create virtual environment
        python3 -m venv ggshield-env
        source ggshield-env/bin/activate
        
        # Install GitGuardian CLI
        pip install ggshield
        
        # Verify installation
        ggshield --version
        
        # Store virtual environment path
        echo "GGSHIELD_ENV=$(pwd)/ggshield-env" >> $GITHUB_ENV

    - name: Run security scan
      if: steps.check-token.outputs.token_available == 'true'
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GG_TOKEN }}
      run: |
        # Activate the virtual environment for the scan
        source $GGSHIELD_ENV/bin/activate
        
        # Run GitGuardian scan with current command syntax
        echo "🔍 Running GitGuardian security scan..."
        
        # Use the correct command for version 1.42.0
        ggshield scan path . --exit-zero --verbose
        
        echo "✅ Security scan completed successfully"

    - name: Build project
      run: npm run build

    - name: Start preview server and wait
      run: |
        npm run preview:ci &
        SERVER_PID=$!
        
        # Wait for server to be ready
        echo "Waiting for preview server to start..."
        timeout 60 bash -c 'until curl -s http://localhost:4174 > /dev/null; do sleep 2; done'
        
        if [ $? -eq 0 ]; then
          echo "Preview server is ready!"
          echo "Server PID: $SERVER_PID"
        else
          echo "Preview server failed to start within 60 seconds"
          exit 1
        fi

    - name: Verify server is running
      run: |
        # Check if server is responding
        curl -f http://localhost:4174 || exit 1
        echo "Server is responding correctly"

    - name: Run Lighthouse CI
      run: |
        # Install Lighthouse CI
        npm install -g @lhci/cli@0.12.x
        
        # Run Lighthouse CI
        lhci autorun

    - name: Upload Lighthouse CI results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/
        retention-days: 30

    - name: Deploy to Netlify
      if: success() && github.ref == 'refs/heads/master'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: master
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
