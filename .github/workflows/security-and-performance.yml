# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Security & Performance Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'

jobs:
  security-and-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check GitGuardian token availability
      id: check-token
      run: |
        if [ -n "${{ secrets.GG_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Install GitGuardian CLI
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        echo "üì• Installing GitGuardian CLI..."
        python3 -m pip install --user --upgrade pip
        python3 -m pip install --user ggshield
        echo "‚úÖ GitGuardian CLI installed successfully"
        python3 -m ggshield --version

    - name: Run GitGuardian security scan
      if: steps.check-token.outputs.token_available == 'true'
      run: |
        echo "üîç Running GitGuardian security scan..."
        echo "Available commands:"
        python3 -m ggshield --help
        
        # Try multiple command variations
        echo "üîÑ Trying scan command variations..."
        
        # Method 1: Try scan path
        if python3 -m ggshield scan path . --exit-zero --verbose; then
          echo "‚úÖ Scan completed successfully with 'scan path'"
          exit 0
        fi
        
        # Method 2: Try scan-repo
        if python3 -m ggshield scan-repo . --exit-zero --verbose; then
          echo "‚úÖ Scan completed successfully with 'scan-repo'"
          exit 0
        fi
        
        # Method 3: Try scan-dir
        if python3 -m ggshield scan-dir . --exit-zero --verbose; then
          echo "‚úÖ Scan completed successfully with 'scan-dir'"
          exit 0
        fi
        
        # Method 4: Try secret scan
        if python3 -m ggshield secret scan . --exit-zero --verbose; then
          echo "‚úÖ Scan completed successfully with 'secret scan'"
          exit 0
        fi
        
        echo "‚ùå All scan methods failed. Available commands:"
        python3 -m ggshield --help
        exit 1

    - name: Skip GitGuardian scan
      if: steps.check-token.outputs.token_available == 'false'
      run: |
        echo "‚ö†Ô∏è GitGuardian token not available, skipping security scan"
        echo "To enable security scanning, add GG_TOKEN to repository secrets"

    - name: Build project
      run: npm run build

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@latest

    - name: Start preview server and wait
      run: |
        echo "üöÄ Starting preview server..."
        npm run preview:ci &
        SERVER_PID=$!
        
        # Wait for server to be ready with flexible port detection
        echo "‚è≥ Waiting for preview server to start..."
        timeout 60 bash -c '
          for port in 4174 4175 4176 4177 4178; do
            if curl -s "http://localhost:$port" > /dev/null 2>&1; then
              echo "‚úÖ Server ready on port $port"
              echo "PORT=$port" > server_port.txt
              exit 0
            fi
            sleep 2
          done
          echo "‚ùå Server failed to start on any port"
          exit 1
        '
        
        if [ $? -eq 0 ]; then
          echo "üéØ Server is ready!"
          echo "Server PID: $SERVER_PID"
          cat server_port.txt
        else
          echo "‚ùå Server failed to start within 60 seconds"
          exit 1
        fi

    - name: Verify server is running
      run: |
        # Read the port from the file
        source server_port.txt
        echo "üîç Verifying server on port $PORT"
        
        # Check if server is responding
        curl -f "http://localhost:$PORT" || exit 1
        echo "‚úÖ Server is responding correctly on port $PORT"
        
        # Wait a bit more for React app to fully load
        echo "‚è≥ Waiting for React app to fully load..."
        sleep 10

    - name: Run Lighthouse CI performance audit
      run: |
        source server_port.txt
        echo "üîç Running Lighthouse CI performance audit on port $PORT..."
        
        # Create reports directory
        mkdir -p reports/lighthouse
        
        # Run Lighthouse CI with the correct port
        lhci collect --config=.lighthouserc.cjs --url="http://localhost:$PORT" || {
          echo "‚ö†Ô∏è Lighthouse collection failed, but continuing..."
        }
        
        # Check if reports were generated
        if [ -d "lighthouse_data" ]; then
          echo "‚úÖ Lighthouse data collected successfully"
          ls -la lighthouse_data/
        else
          echo "‚ùå No Lighthouse data collected"
          exit 1
        fi

    - name: Assert Lighthouse performance thresholds
      run: |
        echo "üìä Asserting Lighthouse performance thresholds..."
        lhci assert --config=.lighthouserc.cjs || {
          echo "‚ö†Ô∏è Some performance thresholds not met, but continuing..."
        }

    - name: Upload Lighthouse reports
      run: |
        echo "üì§ Uploading Lighthouse reports..."
        if [ -d "lighthouse_data" ]; then
          lhci upload --config=.lighthouserc.cjs || {
            echo "‚ö†Ô∏è Lighthouse upload failed, but continuing..."
          }
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports
        path: reports/lighthouse/
        retention-days: 30

    - name: Deploy to Netlify
      if: success() && github.ref == 'refs/heads/master'
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: master
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
